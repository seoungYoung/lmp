<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"  height="500" width="700"  creationComplete="init();"
			   xmlns:s="library://ns.adobe.com/flex/spark" title="항목 수정" close="fnCancelhandler();" 
			   xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="editComplete", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.data.ExamInfo;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			public var $data:ExamInfo;
			private var $delNo:int;
			private var source:File;
			private var target:File;
			public var _year:String;
			[Bindable]
			private var _chapterList:ArrayCollection=new ArrayCollection([1,2,3,4,5,6]);
			
			private function init():void {
				this.$delNo=int(this.$data.id);
				this.cb.selectedIndex=int($data.chapter)-1;
				this.d.selectedDate=this.$data.date;
				this.etcTA.text=this.$data.etc;
				this.problemTA.text=$data.problem;
				this.viewsTA.text=$data.views;
				this.attachmentFileTi.text=$data.attachmentFile;
				if(this.attachmentFileTi.text=="") {
					this.delBtn.enabled=false;
//					this.changeBtn.enabled=false;
				}
				this.problemTA.setFocus();
			}
			private function fnEditHandler():void {
				var filedb:File=File.documentsDirectory.resolvePath("./com/jsy/lmp/"+this._year+"/examData.db");
				var conn:SQLConnection=new SQLConnection();
				conn.open(filedb);
				if(this.attachmentFileTi.text =="") {
					// db만 갱신
					var statement:SQLStatement=new SQLStatement();
					statement.sqlConnection=conn;
					var t:Date=new Date(d.selectedDate.getFullYear(),d.selectedDate.getMonth(),d.selectedDate.getDate());
					statement.text="update examData set chapter='"+this.cb.selectedItem+"', problem='"+this.problemTA.text+"', views='"+this.viewsTA.text+"', mDate=@mDate, etc='"+this.etcTA.text+"' where id="+this.$delNo;
					statement.parameters["@mDate"]=t;
					statement.addEventListener(SQLEvent.RESULT,resultHandler);
					statement.execute();
				}
				else if(this.$data.attachmentFile=="" && this.attachmentFileTi.text!="") {
					// 새로운 첨부파일만 복사 후 디비갱신
					var d1:Date=new Date();
					var sourceName:String=d1.getFullYear()+"_"+(d1.getMonth()+1)+"_"+d1.getDate()+"_"+source.name;
					target=File.documentsDirectory.resolvePath("./com/jsy/lmp/"+this._year+"/assets/attachmentFile/"+sourceName);
					if(target.exists) {
						Alert.show("파일이 존재합니다.\n확인 후 첨부하세요","경고",4,this);
						return;
					}
					else {
						this.copyExecute();
					}
				}
				else if(this.$data.attachmentFile==this.attachmentFileTi.text) {
					// 첨부파일 변화 없고,  디비만 갱신
					statement=new SQLStatement();
					statement.sqlConnection=conn;
					t=new Date(d.selectedDate.getFullYear(),d.selectedDate.getMonth(),d.selectedDate.getDate());
					statement.text="update examData set chapter='"+this.cb.selectedItem+"', problem='"+this.problemTA.text+"', views='"+this.viewsTA.text+"', mDate=@mDate, etc='"+this.etcTA.text+"' where id="+this.$delNo;
					statement.parameters["@mDate"]=t;
					statement.addEventListener(SQLEvent.RESULT,resultHandler);
					statement.execute();
				}
				else if(this.$data.attachmentFile!=this.attachmentFileTi.text) {
					// 기존 파일 지우고, 새 첨부파일 복사 이후에 디비 갱신
					var source:File=new File(this.$data.attachmentFile);
					if(source.exists) {
						source.addEventListener(Event.COMPLETE,fnDeleteCompleteListener);
						source.deleteFileAsync();
					}
				}
			}
			private function fnDeleteCompleteListener(e:Event):void {
				var d1:Date=new Date();
				var sourceName:String=d1.getFullYear()+"_"+(d1.getMonth()+1)+"_"+d1.getDate()+"_"+source.name;
				target=File.documentsDirectory.resolvePath("./com/jsy/lmp/"+this._year+"/assets/attachmentFile/"+sourceName);
				if(target.exists) {
					Alert.show("파일이 존재합니다.\n확인 후 첨부하세요","경고",4,this);
					return;
				}
				else {
					this.copyExecute();
				}
			}
			private function copyExecute():void {
				//				trace(target.nativePath);
				source.addEventListener(Event.COMPLETE,fnCopyCompleteListener);
				source.copyToAsync(target);
			}
			private function fnCopyCompleteListener(e:Event):void {
				//				trace("복사 완료");
				this.fnDBUpdateHandler();
			}
			private function fnDBUpdateHandler():void {
				var filedb:File=File.documentsDirectory.resolvePath("com/jsy/lmp/"+this._year+"/examData.db");
				var conn:SQLConnection=new SQLConnection();
				conn.open(filedb);
				var statement:SQLStatement=new SQLStatement();
				statement.sqlConnection=conn;
				var t:Date=new Date(d.selectedDate.getFullYear(),d.selectedDate.getMonth(),d.selectedDate.getDate());
				statement.text="update examData set chapter='"+this.cb.selectedItem+"', problem='"+this.problemTA.text+"', views='"+this.viewsTA.text+"', mDate=@mDate, etc='"+this.etcTA.text+"', attachmentFile=@attachmentFile where id="+this.$delNo;
				statement.parameters["@mDate"]=t;
				statement.parameters["@attachmentFile"]=this.target.nativePath;
				statement.addEventListener(SQLEvent.RESULT,resultHandler);
				statement.execute();
			}
			private function resultHandler(e:SQLEvent):void {
				this.dispatchEvent(new Event("editComplete"));
				PopUpManager.removePopUp(this);
			}
			private function fnCancelhandler():void {
				PopUpManager.removePopUp(this);
			}
			private function fnSearchHandler():void {
				var file:File=File.desktopDirectory;
				file.addEventListener(Event.SELECT,fnDirectorySelectListener);
				file.browseForOpen("첨부파일을 선택하세요");
			}
			
			private function fnDirectorySelectListener(e:Event):void {
				source=(e.target) as File;
				//				trace(source.nativePath);
				this.attachmentFileTi.text=source.nativePath;
			}
			private function fnDelHandler():void {
				var source:File=new File(this.$data.attachmentFile);
				if(source.exists) {
					source.addEventListener(Event.COMPLETE,fnDelCompleteListener);
					source.deleteFileAsync();
				}
			}
			private function fnDelCompleteListener(e:Event):void {
				var filedb:File=File.documentsDirectory.resolvePath("com/jsy/lmp/"+this._year+"/examData.db");
				var conn:SQLConnection=new SQLConnection();
				conn.open(filedb);
				var statement:SQLStatement=new SQLStatement();
				statement.sqlConnection=conn;
				var t:Date=new Date(d.selectedDate.getFullYear(),d.selectedDate.getMonth(),d.selectedDate.getDate());
				statement.text="update examData set attachmentFile='' where id="+this.$delNo;
				statement.addEventListener(SQLEvent.RESULT,resultAttachDelHandler);
				statement.execute();
			}
			private function resultAttachDelHandler(e:SQLEvent):void {
				this.delBtn.enabled=false;
				$data.attachmentFile="";
				this.attachmentFileTi.text="";
				Alert.show("첨부파일을 삭제했습니다.","확인",4,this);
			}
		]]>
	</fx:Script>
	<s:Label text="아래 항목으로 수정합니다!" fontSize="20" fontFamily="굴림체" fontWeight="bold" color="0x0000ff" left="20" top="10"/>
	<s:FormItem label="날짜" fontSize="15"  y="60" right="50" >
		<s:HGroup width="100%">
			<mx:DateField id="d" />
		</s:HGroup>
	</s:FormItem>
	<s:Form y="60"  width="100%" >
		<s:FormItem label="단원 " width="100%" height="55">
			<s:HGroup verticalAlign="middle">
				<s:ComboBox id="cb" dataProvider="{this._chapterList}" prompt="단원을 선택하세요!" />
				<s:Label text="단원" color="0x0000ff" fontSize="17"/>
			</s:HGroup>
		</s:FormItem>
		<s:FormItem label="문제내용" >
			<s:TextArea id="problemTA" width="100%" imeMode="KOREAN" height="70"/>
		</s:FormItem>
		<s:FormItem label="보기 항목">
			<s:TextArea id="viewsTA" width="100%" imeMode="KOREAN" height="50"/>
		</s:FormItem>
		<s:FormItem label="특기사항" width="100%">
			<s:TextArea id="etcTA" width="100%" imeMode="KOREAN" height="70"/>
		</s:FormItem>
		<s:FormItem label="첨부파일" width="100%">
			<s:HGroup width="100%" height="30">
				<s:TextInput id="attachmentFileTi" width="250" editable="false" />
				<s:Spacer width="20"/>
				<s:Button label="첨부파일 삽입, 교체하기" id="changeBtn" click="fnSearchHandler();"/>
				<s:Button label="첨부파일 삭제하기" id="delBtn" click="fnDelHandler();"/>
			</s:HGroup>
		</s:FormItem>
	</s:Form>
	<s:Button label="수정하기" height="20" right="100" top="10" click="fnEditHandler();" />
	<s:Button label="취소하기" height="20" right="10" top="10" click="fnCancelhandler();" />
</s:TitleWindow>